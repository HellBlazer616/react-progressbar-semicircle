{"version":3,"sources":["../../dist/index.es.js","App.js","index.js"],"names":["index_es_SemiCircleProgress","_ref","_ref$stroke","stroke","undefined","_ref$strokeWidth","strokeWidth","_ref$background","background","_ref$diameter","diameter","_ref$orientation","orientation","_ref$direction","direction","_ref$showPercentValue","showPercentValue","percentage","coordinateForCircle","radius","circumference","Math","PI","semiCirclePercentage","rotation","node_modules_react_default","a","createElement","className","style","position","width","height","transform","overflow","cx","cy","r","fill","strokeDasharray","strokeDashoffset","transition","left","textAlign","bottom","isRequired","percentageisRequired","props","propName","componentName","prop","Error","propTypes","prop_types_default","string","number","oneOf","bool","index_es","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleStrokeColorChange","hex","setState","handleBackgroundColorChange","_ref2","handleShowPercentValue","event","state","handleStrokeWidthChange","handlePercentChange","handleOrientationToggle","target","checked","handleDirectionToggle","_this2","react_default","lib","onChangeComplete","type","onChange","es","min","max","defaultValue","onAfterChange","step","component_default","defaultChecked","Component","require","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.89149d61.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nvar SemiCircleProgress = function SemiCircleProgress(_ref) {\n  var _ref$stroke = _ref.stroke,\n      stroke = _ref$stroke === undefined ? \"#02B732\" : _ref$stroke,\n      _ref$strokeWidth = _ref.strokeWidth,\n      strokeWidth = _ref$strokeWidth === undefined ? 10 : _ref$strokeWidth,\n      _ref$background = _ref.background,\n      background = _ref$background === undefined ? \"#D0D0CE\" : _ref$background,\n      _ref$diameter = _ref.diameter,\n      diameter = _ref$diameter === undefined ? 200 : _ref$diameter,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === undefined ? \"up\" : _ref$orientation,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === undefined ? \"right\" : _ref$direction,\n      _ref$showPercentValue = _ref.showPercentValue,\n      showPercentValue = _ref$showPercentValue === undefined ? false : _ref$showPercentValue,\n      percentage = _ref.percentage;\n  var coordinateForCircle = diameter / 2;\n  var radius = (diameter - 2 * strokeWidth) / 2;\n  var circumference = Math.PI * radius;\n  var percentageValue = void 0;\n\n  if (percentage > 100) {\n    percentageValue = 100;\n  } else if (percentage < 0) {\n    percentageValue = 0;\n  } else {\n    percentageValue = percentage;\n  }\n\n  var semiCirclePercentage = percentageValue * (circumference / 100);\n  var rotation = void 0;\n\n  if (orientation === \"down\") {\n    if (direction === \"left\") {\n      rotation = \"rotate(180deg) rotateY(180deg)\";\n    } else {\n      rotation = \"rotate(180deg)\";\n    }\n  } else {\n    if (direction === \"right\") {\n      rotation = \"rotateY(180deg)\";\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"semicircle-container\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(\"svg\", {\n    width: diameter,\n    height: diameter / 2,\n    style: {\n      transform: rotation,\n      overflow: \"hidden\"\n    }\n  }, React.createElement(\"circle\", {\n    cx: coordinateForCircle,\n    cy: coordinateForCircle,\n    r: radius,\n    fill: \"none\",\n    stroke: background,\n    strokeWidth: strokeWidth,\n    strokeDasharray: circumference,\n    style: {\n      strokeDashoffset: circumference\n    }\n  }), React.createElement(\"circle\", {\n    cx: coordinateForCircle,\n    cy: coordinateForCircle,\n    r: radius,\n    fill: \"none\",\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    strokeDasharray: circumference,\n    style: {\n      strokeDashoffset: semiCirclePercentage,\n      transition: \"stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s\"\n    }\n  })), showPercentValue && React.createElement(\"span\", {\n    className: \"semicircle-percent-value\",\n    style: {\n      width: \"100%\",\n      left: \"0\",\n      textAlign: \"center\",\n      bottom: orientation === \"down\" ? \"auto\" : \"0\",\n      position: \"absolute\"\n    }\n  }, percentage, \"%\"));\n};\n\nfunction percentageValidation(isRequired) {\n  return function (props, propName, componentName) {\n    var prop = props[propName];\n\n    if (prop == null) {\n      if (isRequired) {\n        throw new Error(\"Percentage is a required prop.\");\n      }\n    } else {\n      if (typeof prop !== \"number\") {\n        return new Error(\"Invalid percentage. Must be a number between 0 and 100.\");\n      }\n\n      if (props[propName] < 0 || props[propName] > 100) {\n        return new Error(\"Invalid percentage. Must be a number between 0 and 100.\");\n      }\n    }\n  };\n}\n\nvar percentageisRequired = percentageValidation(true);\nSemiCircleProgress.propTypes = {\n  stroke: PropTypes.string,\n  strokeWidth: PropTypes.number,\n  background: PropTypes.string,\n  diameter: PropTypes.number,\n  orientation: PropTypes.oneOf([\"up\", \"down\"]),\n  direction: PropTypes.oneOf([\"left\", \"right\"]),\n  showPercentValue: PropTypes.bool,\n  percentage: percentageisRequired\n};\nexport default SemiCircleProgress;","import React, { Component } from \"react\";\n\nimport SemiCircleProgressBar from \"react-progressbar-semicircle\";\nimport { TwitterPicker } from \"react-color\";\nimport Slider from \"rc-slider\";\nimport Toggle from \"react-toggle\";\n\nimport \"rc-slider/assets/index.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stroke: \"#02B732\",\n      strokeWidth: 10,\n      background: \"#D0D0CE\",\n      diameter: 300,\n      orientation: \"up\",\n      direction: \"right\",\n      showPercentValue: true,\n      percentage: 75\n    };\n  }\n\n  handleStrokeColorChange = ({ hex }) => this.setState({ stroke: hex });\n  handleBackgroundColorChange = ({ hex }) => this.setState({ background: hex });\n  handleShowPercentValue = event =>\n    this.setState({ showPercentValue: !this.state.showPercentValue });\n  handleStrokeWidthChange = strokeWidth => this.setState({ strokeWidth });\n  handlePercentChange = percentage => this.setState({ percentage });\n  handleOrientationToggle = event => {\n    if (event.target.checked) {\n      this.setState({ orientation: \"down\" });\n    } else {\n      this.setState({ orientation: \"up\" });\n    }\n  };\n  handleDirectionToggle = event => {\n    if (event.target.checked) {\n      this.setState({ direction: \"left\" });\n    } else {\n      this.setState({ direction: \"right\" });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"example-container\">\n        <div>\n          <SemiCircleProgressBar\n            stroke={this.state.stroke}\n            strokeWidth={this.state.strokeWidth}\n            background={this.state.background}\n            diameter={this.state.diameter}\n            orientation={this.state.orientation}\n            direction={this.state.direction}\n            showPercentValue={this.state.showPercentValue}\n            percentage={this.state.percentage}\n          />\n        </div>\n        <div className=\"example-controls\">\n          <div className=\"color-controls\">\n            <div>\n              <span>Set stroke color for the progress bar</span>\n              <TwitterPicker\n                className=\"stroke-color\"\n                onChangeComplete={this.handleStrokeColorChange}\n              />\n            </div>\n            <div>\n              <span>Set background color for the progress bar</span>\n              <TwitterPicker\n                className=\"background-color\"\n                onChangeComplete={this.handleBackgroundColorChange}\n              />\n            </div>\n          </div>\n          <div className=\"show-percent-value\">\n            <input\n              type=\"checkbox\"\n              onChange={event => this.handleShowPercentValue(event)}\n              checked={this.state.showPercentValue}\n            />\n            <span>Show percent value in progress bar</span>\n          </div>\n          <span>Set stroke width for the progress bar</span>\n          <div className=\"stroke-width\">\n            <Slider\n              min={2}\n              max={25}\n              defaultValue={this.state.strokeWidth}\n              onAfterChange={this.handleStrokeWidthChange}\n            />\n            <span>{this.state.strokeWidth}</span>\n          </div>\n          <span>Set percentage for the progress bar</span>\n          <div className=\"percent-value\">\n            <Slider\n              min={0}\n              max={100}\n              step={5}\n              defaultValue={this.state.percentage}\n              onAfterChange={this.handlePercentChange}\n            />\n            <span>{this.state.percentage}%</span>\n          </div>\n          <div className=\"orientation-toggle\">\n            <Toggle\n              defaultChecked={false}\n              onChange={event => this.handleOrientationToggle(event)}\n            />\n            <span>Flip progress bar</span>\n          </div>\n          <div className=\"direction-toggle\">\n            <Toggle\n              defaultChecked={false}\n              onChange={event => this.handleDirectionToggle(event)}\n            />\n            <span>Switch direction</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport \"react-toggle/style.css\";\nimport App from \"./App\";\n\nrequire(\"create-react-class\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}